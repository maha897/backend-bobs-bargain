openapi: 3.0.0
info:
  title: Authentication, User, and Listing API
  description: CRUD API endpoints for authenticating users and managing listings
  version: 1.1.0
servers:
  - url: http://localhost:4000
tags:
  - name: auth
  - name: user
  - name: listing

paths:
  /auth/login:
    post:
      tags:
        - auth
      summary: Authenticate user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          description: Unauthorized

  /auth/signup:
    post:
      summary: Register a new user
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
      responses:
        '201':
          description: New user is registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
        '409':
          description: Conflict - Email is already in use

  /users:
    get:
      summary: Get all users
      tags:
        - user

      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found


  /users/{id}:
    get:
      summary: Get user by ID
      tags:
        - user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174000
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    put:
      summary: Update user by ID
      tags:
        - user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174000
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: User not found
    delete:
      summary: Delete user by ID
      tags:
        - user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
            example: 550e8400-e29b-41d4-a716-446655440000
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '404':
          description: User not found

  /listings:

    post:
      summary: Create a new listing
      tags:
        - listing
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Listing'
      responses:
        '201':
          description: Listing created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Listing'
        '400':
          description: Bad request

    get:
      summary: Get all listings
      tags:
        - listing
      responses:
        '200':
          description: Listing(s) found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Listing'


  /listings/{id}:

    get:
      summary: Get listing by ID
      tags:
        - listing
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174000
      responses:
        '200':
          description: Listing found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Listing'
        '404':
          description: Listing not found
    put:
      summary: Update listing by ID
      tags:
        - listing
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174000
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Listing'
      responses:
        '200':
          description: Listing updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Listing'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Listing not found
    delete:
      summary: Delete listing by ID
      tags:
        - listing
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
            example: 550e8400-e29b-41d4-a716-446655440000
      responses:
        '200':
          description: Listing deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Listing'
        '401':
          description: Unauthorized
        '404':
          description: Listing not found



components:
  schemas:
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: example@example.com
        password:
          type: string

    SignupRequest:
      type: object
      required:
        - email
        - firstName
        - lastName
        - phone
        - password
      properties:
        email:
          type: string
          format: email
          example: example@example.com
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        phone:
          type: string
          example: 1234567890
        password:
          type: string
          example: mypassword

    TokenResponse:
      type: object
      properties:
        token:
          type: string
        userId:
          type: string
        username:
          type: string

    User:
      type: object
      required:
        - email
        - firstName
        - lastName
        - phone
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        phone:
          type: string
          example: 1234567890

    Listing:
      type: object
      required:
        - title
        - description
        - price
        - address
        - city
        - postcode
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        price:
          type: number
        images:
          type: array
          items:
            type: object
            required:
              - imageData
              - imageType
            properties:
              id:
                type: string
                format: uuid
              imageData:
                type: string
              imageType:
                type: string
        address:
          type: string
        city:
          type: string
        postcode:
          type: integer
